class IcapVarValue{constructor(a,b){this.varName=a;this.parsableValue=b}getVarName(){return this.varName}setParsableValue(a){this.parsableValue=a;return this}getParsableValue(){return this.parsableValue}}
class IcapMeasurement{constructor(a){this.id=function(){let b=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){let d=(b+16*Math.random())%16|0;b=Math.floor(b/16);return("x"==c?d:d&3|8).toString(16)})}();this.sensorId=a;this.varValues={}}createVarValue(a,b){return new IcapVarValue(a,b)}addVarValue(a,b){this.varValues[a]=this.createVarValue(a,b);return this}}
class IcapReporter{constructor(){this.icapMetas={};this.measurements=[];this.startedAt=new Date}isIcapMeta(a){return 0==String(a.getAttribute("name")).indexOf("icap.")}collectIcapMetas(){let a=document.getElementsByTagName("meta");for(let b of a)this.isIcapMeta(b)&&(this.icapMetas[b.getAttribute("name")]=b.getAttribute("content"))}getIcapMeta(a){return this.icapMetas[a]}getMeasurements(){return this.measurements}getStartedAt(){return this.startedAt}formatDateTime(a){let b=a.getFullYear()+"-"+(a.getMonth()+
1)+"-"+a.getDate(),c=a.getHours()+":"+a.getMinutes()+":"+a.getSeconds()+"."+a.getMilliseconds();a=a.getTimezoneOffset()/60;return b+" "+c+" UTC"+((0>a?"-":"+")+(10>Math.abs(a)?"0":"")+a)}getTimeOffset(a){return(a||new Date).getTime()-this.getStartedAt().getTime()}getMeasurementsReceiverEndpointUrl(){return this.getIcapMeta("icap.receiver.endpointUrl")}getSensorId(){return this.getIcapMeta("icap.sensor.id")}getCommitMeasurementsRequestHeaders(){return{"Content-Type":"application/json"}}addIcapMetaToMeasurement(a,
b){a.addVarValue(b,this.getIcapMeta(b))}createMeasurement(){let a=new IcapMeasurement(this.getSensorId());this.addIcapMetaToMeasurement(a,"icap.cms.uid");this.addIcapMetaToMeasurement(a,"icap.cms.verno");this.addIcapMetaToMeasurement(a,"icap.cms.verdatetime");this.addIcapMetaToMeasurement(a,"icap.cms.origlang");this.addIcapMetaToMeasurement(a,"icap.cms.doc.uid");this.addIcapMetaToMeasurement(a,"icap.cms.doc.verno");this.addIcapMetaToMeasurement(a,"icap.cms.doc.verdatetime");this.addIcapMetaToMeasurement(a,
"icap.cms.doc.origlang");return a}addMeasurement(a){this.measurements.push(a)}addActionMeasurement(a){let b=new Date,c=this.createMeasurement();c.addVarValue("icap.action.code",a);c.addVarValue("icap.action.acceptedAt",this.formatDateTime(b));c.addVarValue("icap.action.timeOffset",this.getTimeOffset(b));this.addMeasurement(c)}addLoadMeasurement(){this.addActionMeasurement("LOAD")}addUnloadMeasurement(){this.addActionMeasurement("UNLOAD")}commitMeasurements(){this.addUnloadMeasurement();let a={method:"post",
headers:this.getCommitMeasurementsRequestHeaders(),body:JSON.stringify(this.getMeasurements()),keepalive:!0};fetch(this.getMeasurementsReceiverEndpointUrl(),a)}init(){this.collectIcapMetas();this.addLoadMeasurement();return this}}var GLOBAL_ICAP_REPORTER=(new IcapReporter).init();function icapCommitMeasurements(){GLOBAL_ICAP_REPORTER.commitMeasurements()}function icapInstallMeasurementsReporter(){window.addEventListener("beforeunload",icapCommitMeasurements)}icapInstallMeasurementsReporter();
