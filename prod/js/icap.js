function icapAssembleUniqueId(){let a=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(b){let c=(a+16*Math.random())%16|0;a=Math.floor(a/16);return("x"==b?c:c&3|8).toString(16)})}
function icapAssembleNowString(){function a(d){return(10>d?"0":"")+Math.abs(d)}function b(d,f,g,h){return[a(d),a(f),a(g)].join(h)}var c=new Date;let e=b(c.getFullYear(),c.getMonth()+1,c.getDate(),"-"),k=b(c.getHours(),c.getMinutes(),c.getSeconds(),":")+"."+function(d){return(10>d?"00":100>d?"0":"")+Math.abs(d)}(c.getMilliseconds());c=-c.getTimezoneOffset()/60;c=(0>c?"-":"+")+a(c);return e+" "+k+" UTC"+c}
class IcapVarValue{constructor(a,b){this.varName=a;this.parsableValue=b}getVarName(){return this.varName}setParsableValue(a){this.parsableValue=a;return this}getParsableValue(){return this.parsableValue}exportDto(){return{varname:this.getVarName(),parsable_value:this.getParsableValue()}}}
class IcapMeasurement{constructor(a){this.id=icapAssembleUniqueId();this.acceptedAt=icapAssembleNowString();this.sensorId=a;this.argValues=[];this.outValues=[];this.committed=!1}getId(){return this.id}getAcceptedAt(){return this.acceptedAt}getSensorId(){return this.sensorId}createVarValue(a,b){return new IcapVarValue(a,b)}addArgValue(a,b){this.argValues.push(this.createVarValue(a,b));return this}addOutValue(a,b){this.outValues.push(this.createVarValue(a,b));return this}assembleValDtoArray(a){let b=
[];a.forEach(c=>b.push(c.exportDto()));return b}exportArgDtos(){return this.assembleValDtoArray(this.argValues)}exportOutDtos(){return this.assembleValDtoArray(this.outValues)}exportDto(){return{id:this.getId(),accepted_at:this.getAcceptedAt(),sensor_id:this.getSensorId(),args:this.exportArgDtos(),outs:this.exportOutDtos()}}markAsCommitted(){this.committed=!0}isCommitted(){return this.committed}}
class IcapParser{constructor(){this.icapMetas={};for(let a of document.getElementsByTagName("meta"))this.isIcapMeta(a)&&(this.icapMetas[a.getAttribute("name")]=a.getAttribute("content"))}getPageTitle(){let a=document.getElementsByTagName("title")[0];return a?a.innerText:""}getPageUrl(){return location.href}getUserAgent(){return navigator.userAgent}getUserLangCode(){return navigator.language}isIcapMetaName(a){return 0==a.indexOf("icap.")}isIcapMeta(a){return this.isIcapMetaName(String(a.getAttribute("name")))}getMeta(a){return this.icapMetas[a]}getDocLocalCode(){let a=
document.getElementsByTagName("html")[0].getAttribute("lang");return a?a:"en"}getReceiverEndpointUrl(){return this.getMeta("icap.receiver.endpointUrl")}getSensorId(){return this.getMeta("icap.sensor.id")}getDocSignature(){return this.getMeta("icap.cms.doc.uid")+":"+this.getMeta("icap.cms.doc.verno")}isIcapTaxonomyMetaName(a){return 0==a.indexOf("icap.cms.taxonomy.")}getTaxonomy(){let a=[];for(let b of Object.keys(this.icapMetas))this.isIcapTaxonomyMetaName(b)&&a.push({entry:b,content:this.getMeta(b)});
return a}}
class IcapReporter{constructor(){this.parser=this.createParser();this.prevPagereadId=this.recallPrevPagereadId();this.setPagereadId();this.startedAt=new Date;this.measurements=[];this.addPagereadMeasurement();this.addTaxonomyMeasurement();this.addCountryMeasurement();this.addLoadActionMeasurement();this.commitMeasurements()}createParser(){return new IcapParser}getPagereadStorageKey(){"icap."+this.parser.getDocSignature()}recallPrevPagereadId(){return localStorage.getItem(this.getPagereadStorageKey())}setPagereadId(){this.pagereadId=icapAssembleUniqueId();
localStorage.setItem(this.getPagereadStorageKey(),this.pagereadId)}getPagereadId(){return this.pagereadId}getPrevPagereadId(){return this.prevPagereadId}getStartedAt(){return this.startedAt}getTimeOffset(){return(new Date).getTime()-this.getStartedAt().getTime()}getNotCommittedMeasurements(){return this.measurements.filter(a=>!a.isCommitted())}markMeasurementsAsCommitted(){this.measurements.forEach(a=>a.markAsCommitted())}getCommitMeasurementsRequestHeaders(){return{"Content-Type":"application/json"}}createMeasurement(){return new IcapMeasurement(this.parser.getSensorId())}addMeasurement(a){this.measurements.push(a)}addPagereadMeasurement(){let a=
this.createMeasurement();a.addArgValue("icap.pagereadId",this.getPagereadId());a.addOutValue("icap.prevPagereadId",this.getPrevPagereadId());a.addOutValue("icap.cms.doc.uid",this.parser.getMeta("icap.cms.doc.uid"));a.addOutValue("icap.cms.doc.verno",this.parser.getMeta("icap.cms.doc.verno"));a.addOutValue("icap.cms.doc.localCode",this.parser.getDocLocalCode());a.addOutValue("icap.cms.topic.uid",this.parser.getMeta("icap.cms.topic.uid"));a.addOutValue("icap.cms.topic.verno",this.parser.getMeta("icap.cms.topic.verno"));
a.addOutValue("icap.page.title",this.parser.getPageTitle());a.addOutValue("icap.page.url",this.parser.getPageUrl());a.addOutValue("userAgentInfo",this.parser.getUserAgent());a.addOutValue("userLangCode",this.parser.getUserLangCode());this.addMeasurement(a)}addTaxonomyMeasurement(){let a=this.parser.getTaxonomy();if(0<a.length){let b=this.createMeasurement();b.addArgValue("icap.cms.doc.uid",this.parser.getMeta("icap.cms.doc.uid"));b.addArgValue("icap.cms.doc.verno",this.parser.getMeta("icap.cms.doc.verno"));
b.addArgValue("icap.cms.doc.localCode",this.parser.getDocLocalCode());b.addArgValue("icap.cms.topic.uid",this.parser.getMeta("icap.cms.topic.uid"));b.addArgValue("icap.cms.topic.verno",this.parser.getMeta("icap.cms.topic.verno"));a.forEach(c=>b.addOutValue(c.entry,c.content));this.addMeasurement(b)}}addCountryMeasurement(){fetch("https://api.country.is").then(a=>a.json()).then(a=>{let b=this.createMeasurement();b.addArgValue("icap.pagereadId",this.getPagereadId());b.addOutValue("icap.countryCode",
a.country);this.addMeasurement(b);this.commitMeasurements()}).catch(a=>{})}addActionMeasurement(a,b=null){let c=this.createMeasurement();c.addArgValue("icap.pagereadId",this.getPagereadId());c.addArgValue("icap.action.code",a);c.addArgValue("icap.action.timeOffset",this.getTimeOffset());b&&b.forEach(e=>c.addOutValue(e.varname,e.parsable_value));this.addMeasurement(c)}addLoadActionMeasurement(){this.addActionMeasurement("LOAD")}addUnloadActionMeasurement(){this.addActionMeasurement("UNLOAD")}assembleMeasurementDtoArray(){let a=
[];this.getNotCommittedMeasurements().forEach(b=>a.push(b.exportDto()));return a}exportDto(){return{measurements:this.assembleMeasurementDtoArray()}}commitMeasurements(){let a={method:"post",headers:this.getCommitMeasurementsRequestHeaders(),body:JSON.stringify(this.exportDto()),keepalive:!0};fetch(this.parser.getReceiverEndpointUrl(),a);this.markMeasurementsAsCommitted()}commitUnload(){this.addUnloadActionMeasurement();let a=new FormData;a.set("unloadMeasurement",JSON.stringify(this.exportDto()));
navigator.sendBeacon(this.parser.getReceiverEndpointUrl(),a)}}var GLOBAL_ICAP_REPORTER=new IcapReporter;function icapCommitUnload(){GLOBAL_ICAP_REPORTER.commitUnload()}function icapInstallMeasurementsReporter(){window.addEventListener("beforeunload",icapCommitUnload)}icapInstallMeasurementsReporter();
